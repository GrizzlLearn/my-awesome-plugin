<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Mail Items Dashboard</title>
	<style>
		/* –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ - –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º */
		.container {
			max-width: 1200px;
			margin: 0 auto;
			padding: 20px;
			font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
		}

		.header {
			text-align: center;
			margin-bottom: 30px;
			padding: 20px;
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			color: white;
			border-radius: 10px;
		}

		.header h1 {
			margin: 0 0 10px 0;
			font-size: 2.5rem;
		}

		.header p {
			margin: 0;
			opacity: 0.9;
		}

		.loading {
			text-align: center;
			padding: 40px;
		}

		.spinner {
			border: 4px solid #f3f3f3;
			border-top: 4px solid #667eea;
			border-radius: 50%;
			width: 40px;
			height: 40px;
			animation: spin 1s linear infinite;
			margin: 0 auto 20px;
		}

		@keyframes spin {
			0% { transform: rotate(0deg); }
			100% { transform: rotate(360deg); }
		}

		.table-container {
			background: white;
			border-radius: 10px;
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
			overflow: hidden;
			margin-bottom: 20px;
		}

		.mail-table {
			width: 100%;
			border-collapse: collapse;
		}

		.mail-table th {
			background: #f8f9fa;
			padding: 15px;
			text-align: left;
			font-weight: 600;
			color: #495057;
			border-bottom: 2px solid #dee2e6;
		}

		.mail-table td {
			padding: 15px;
			border-bottom: 1px solid #dee2e6;
			vertical-align: top;
		}

		.mail-table tr:hover {
			background-color: #f8f9fa;
		}

		.from-cell {
			font-weight: 500;
			color: #495057;
			max-width: 200px;
		}

		.to-cell {
			color: #6c757d;
			max-width: 200px;
		}

		.subject-cell {
			font-weight: 500;
			max-width: 300px;
		}

		.body-cell {
			max-width: 400px;
			word-wrap: break-word;
		}

		.truncate {
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}

		.expand-btn {
			background: #667eea;
			color: white;
			border: none;
			padding: 4px 8px;
			border-radius: 4px;
			cursor: pointer;
			font-size: 0.8rem;
			margin-top: 5px;
		}

		.expand-btn:hover {
			background: #5a67d8;
		}

		.stats {
			text-align: center;
			color: #6c757d;
			font-size: 0.9rem;
		}

		.empty-state {
			text-align: center;
			padding: 60px 20px;
			color: #6c757d;
		}

		.empty-icon {
			width: 64px;
			height: 64px;
			margin: 0 auto 20px;
			opacity: 0.5;
		}

		.empty-state h3 {
			margin: 0 0 10px 0;
			color: #495057;
		}
	</style>
</head>
<body>
<div class="container">
	<div class="header">
		<h1>üìß Mail Items Dashboard</h1>
		<p>Manage and view your mail items with style</p>
	</div>

	<div id="loading" class="loading">
		<div class="spinner"></div>
		<p>Loading mail items...</p>
	</div>

	<div id="content" style="display: none;">
		<div class="table-container">
			<table class="mail-table">
				<thead>
				<tr>
					<th>From</th>
					<th>To</th>
					<th>Subject</th>
					<th>Body</th>
				</tr>
				</thead>
				<tbody id="mail-items-body">
				<!-- Data will be inserted here -->
				</tbody>
			</table>
		</div>
		<div id="stats" class="stats">
			<!-- Stats will be shown here -->
		</div>
	</div>

	<div id="empty-state" class="empty-state" style="display: none;">
		<svg class="empty-icon" fill="currentColor" viewBox="0 0 20 20">
			<path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
			<path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
		</svg>
		<h3>No mail items found</h3>
		<p>There are currently no mail items to display.</p>
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const loading = document.getElementById("loading");
		const content = document.getElementById("content");
		const emptyState = document.getElementById("empty-state");
		const tableBody = document.getElementById("mail-items-body");
		const stats = document.getElementById("stats");

		// Function to create expandable content
		function createExpandableContent(text, maxLength = 100) {
			if (text.length <= maxLength) {
				return text;
			}

			const truncated = text.substring(0, maxLength) + "...";
			const fullText = text;

			const container = document.createElement('div');
			const textSpan = document.createElement('span');
			const button = document.createElement('button');

			textSpan.textContent = truncated;
			button.textContent = 'Show more';
			button.className = 'expand-btn';

			let isExpanded = false;
			button.addEventListener('click', function() {
				if (isExpanded) {
					textSpan.textContent = truncated;
					button.textContent = 'Show more';
					isExpanded = false;
				} else {
					textSpan.textContent = fullText;
					button.textContent = 'Show less';
					isExpanded = true;
				}
			});

			container.appendChild(textSpan);
			container.appendChild(document.createElement('br'));
			container.appendChild(button);

			return container;
		}

		// Function to process mail items
		function processMailItems(items) {
			loading.style.display = "none";

			if (items.length === 0) {
				emptyState.style.display = "block";
				return;
			}

			content.style.display = "block";

			items.forEach(item => {
				const row = document.createElement("tr");

				const fromCell = document.createElement("td");
				fromCell.className = "from-cell";
				fromCell.textContent = item.from || 'Unknown';

				const toCell = document.createElement("td");
				toCell.className = "to-cell";
				toCell.textContent = Array.isArray(item.to) ? item.to.join(", ") : (item.to || 'Unknown');

				const subjectCell = document.createElement("td");
				subjectCell.className = "subject-cell truncate";
				subjectCell.textContent = item.subject || 'No subject';
				subjectCell.title = item.subject || 'No subject';

				const bodyCell = document.createElement("td");
				bodyCell.className = "body-cell";
				const bodyContent = item.body || 'No content';
				if (bodyContent.length > 100) {
					bodyCell.appendChild(createExpandableContent(bodyContent, 100));
				} else {
					bodyCell.textContent = bodyContent;
				}

				row.appendChild(fromCell);
				row.appendChild(toCell);
				row.appendChild(subjectCell);
				row.appendChild(bodyCell);

				tableBody.appendChild(row);
			});

			stats.textContent = `Showing ${items.length} mail item`;
		}

		// Fetch data from servlet
		fetch("/jira/plugins/servlet/mail-items/data")
				.then(response => {
					if (!response.ok) {
						throw new Error(`HTTP error! status: ${response.status}`);
					}
					const contentType = response.headers.get("content-type");
					if (!contentType || !contentType.includes("application/json")) {
						throw new Error("Response is not JSON");
					}
					return response.json();
				})
				.then(items => {
					processMailItems(items);
				})
				.catch(error => {
					console.error('Error fetching mail items:', error);
					loading.innerHTML = `
                    <div style="color: #ef4444;">
                        <p><strong>Error loading mail items</strong></p>
                        <p style="font-size: 0.9rem; margin-top: 8px;">
                            ${error.message}
                        </p>
                    </div>
                `;
				});
	});
</script>
</body>
</html>
