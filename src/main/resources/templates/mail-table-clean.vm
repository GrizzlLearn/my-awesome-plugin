## CSS –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ WebResourceManager –≤ —Å–µ—Ä–≤–ª–µ—Ç–µ

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Mail Items Dashboard</title>
	## –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ CSS —á–µ—Ä–µ–∑ –Ω–∞—à servlet
	<link rel="stylesheet" type="text/css" href="css/mail-table.css">
</head>
<body>
<div class="container">
	<div class="header">
		<h1>üìß Mail Items Dashboard</h1>
		<p>Manage and view your mail items with style</p>
	</div>
	<div class="actions">
		<button id="create-test-data-btn" class="create-btn">
			üìù Create Test Data
		</button>
		<button id="delete-all-btn" class="delete-btn">
			üóëÔ∏è Delete All Items
		</button>
	</div>
	<div id="loading" class="loading">
		<div class="spinner"></div>
		<p>Loading mail items...</p>
	</div>

	<div id="content" style="display: none;">
		<div class="table-container">
			<table class="mail-table">
				<thead>
				<tr>
					<th>ID</th>
					<th>From</th>
					<th>To</th>
					<th>Subject</th>
					<th>Body</th>
				</tr>
				</thead>
				<tbody id="mail-items-body">
				<!-- Data will be inserted here -->
				</tbody>
			</table>
		</div>
		<div id="stats" class="stats">
			<!-- Stats will be shown here -->
		</div>
	</div>

	<div id="empty-state" class="empty-state" style="display: none;">
		<svg class="empty-icon" fill="currentColor" viewBox="0 0 20 20">
			<path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
			<path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
		</svg>
		<h3>No mail items found</h3>
		<p>There are currently no mail items to display.</p>
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const loading = document.getElementById("loading");
		const content = document.getElementById("content");
		const emptyState = document.getElementById("empty-state");
		const tableBody = document.getElementById("mail-items-body");
		const stats = document.getElementById("stats");

		// Function to reload data
		function loadData() {
			// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
			loading.style.display = "block";
			content.style.display = "none";
			emptyState.style.display = "none";

			// –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
			tableBody.innerHTML = '';

			fetch("/jira/plugins/servlet/mail-items/data")
					.then(response => {
						if (!response.ok) {
							throw new Error(`HTTP error! status: ${response.status}`);
						}
						const contentType = response.headers.get("content-type");
						if (!contentType || !contentType.includes("application/json")) {
							throw new Error("Response is not JSON");
						}
						return response.json();
					})
					.then(items => {
						processMailItems(items);
					})
					.catch(error => {
						console.error('Error fetching mail items:', error);
						loading.innerHTML =
								'<div style="color: #ef4444;">' +
								'<p><strong>Error loading mail items</strong></p>' +
								'<p style="font-size: 0.9rem; margin-top: 8px;">' +
								(error.message || 'Please check your connection and try again.') +
								'</p>' +
								'</div>';
					});
		}

		// Function to create test data
		function createTestData() {
			const createBtn = document.getElementById('create-test-data-btn');
			const originalText = createBtn.textContent;

			// –û—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
			createBtn.disabled = true;
			createBtn.textContent = '‚è≥ Creating...';

			fetch("/jira/plugins/servlet/mail-items/create-test-data", {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				}
			})
					.then(response => response.json())
					.then(result => {
						if (result.success) {
							// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
							alert('Test data created successfully!');
							// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
							loadData();
						} else {
							alert('Error: ' + (result.error || 'Failed to create test data'));
						}
					})
					.catch(error => {
						console.error('Error creating test data:', error);
						alert('Failed to create test data. Please check the console for details.');
					})
					.finally(() => {
						// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
						createBtn.disabled = false;
						createBtn.textContent = originalText;
					});
		}

		// Function to delete all mail items
		function deleteAllMailItems() {
			if (!confirm('Are you sure you want to delete ALL mail items? This action cannot be undone!')) {
				return;
			}

			const deleteBtn = document.getElementById('delete-all-btn');
			const originalText = deleteBtn.textContent;

			// Disable button and show loading state
			deleteBtn.disabled = true;
			deleteBtn.textContent = '‚è≥ Deleting...';

			fetch("/jira/plugins/servlet/mail-items/delete-all", {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				}
			})
					.then(response => response.json())
					.then(result => {
						if (result.success) {
							// Show success message
							alert(result.message);

							// Clear the table and show empty state
							tableBody.innerHTML = '';
							content.style.display = "none";
							emptyState.style.display = "block";

						} else {
							alert('Error: ' + (result.error || 'Failed to delete items'));
						}
					})
					.catch(error => {
						console.error('Error deleting mail items:', error);
						alert('Failed to delete mail items. Please check the console for details.');
					})
					.finally(() => {
						// Restore button state
						deleteBtn.disabled = false;
						deleteBtn.textContent = originalText;
					});
		}

		// –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º
		const createBtn = document.getElementById('create-test-data-btn');
		if (createBtn) {
			createBtn.addEventListener('click', createTestData);
		}

		const deleteBtn = document.getElementById('delete-all-btn');
		if (deleteBtn) {
			deleteBtn.addEventListener('click', deleteAllMailItems);
		}

		// Function to create detail row
		function createDetailRow(item) {
			const detailRow = document.createElement("tr");
			detailRow.className = "detail-row";
			
			const detailCell = document.createElement("td");
			detailCell.colSpan = 5;
			
			detailCell.innerHTML = `
				<div class="detail-content">
					<div class="detail-section">
						<h4>üìß –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
						<div class="detail-field">
							<span class="detail-label">ID:</span>
							<span class="detail-value uuid">${item.id || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
						</div>
						<div class="detail-field">
							<span class="detail-label">–û—Ç:</span>
							<span class="detail-value email">${item.from || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
						</div>
						<div class="detail-field">
							<span class="detail-label">–ö–æ–º—É:</span>
							<span class="detail-value email">${Array.isArray(item.to) ? item.to.join(', ') : (item.to || '–ù–µ —É–∫–∞–∑–∞–Ω')}</span>
						</div>
						<div class="detail-field">
							<span class="detail-label">–ö–æ–ø–∏—è:</span>
							<span class="detail-value email">${Array.isArray(item.cc) ? item.cc.join(', ') : (item.cc || '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</span>
						</div>
						<div class="detail-field">
							<span class="detail-label">–°–∫—Ä—ã—Ç–∞—è:</span>
							<span class="detail-value email">${Array.isArray(item.bcc) ? item.bcc.join(', ') : (item.bcc || '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</span>
						</div>
					</div>
					<div class="detail-section">
						<h4>üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞</h4>
						<div class="detail-field">
							<span class="detail-label">–¢–µ–º–∞:</span>
							<span class="detail-value">${item.subject || '–ë–µ–∑ —Ç–µ–º—ã'}</span>
						</div>
						<div class="detail-field" style="flex-direction: column; align-items: flex-start;">
							<span class="detail-label">–¢–µ–∫—Å—Ç:</span>
							<div class="view-mode-buttons">
								<button class="view-mode-btn active" data-mode="preview">üìÑ –ü—Ä–µ–≤—å—é</button>
								<button class="view-mode-btn" data-mode="formatted">üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</button>
							</div>
							
							<div class="content-view active" data-view="preview">
								<div class="detail-value" style="margin-top: 8px; padding: 10px; background: #f9fafb; border-radius: 6px; max-height: 200px; overflow-y: auto; white-space: pre-wrap;">${item.body || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}</div>
							</div>
							
							<div class="content-view" data-view="formatted">
								<div class="formatted-content"></div>
								<div class="encoding-info">üé® HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–≥–æ–≤ –∏ —Å—Ç–∏–ª–µ–π</div>
							</div>
						</div>
					</div>
				</div>
			`;
			
			detailRow.appendChild(detailCell);
			
			// –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
			const bodyText = item.body || '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
			const formattedContent = detailCell.querySelector('.formatted-content');
			
			// –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–∫–∞–∫ HTML)
			formattedContent.innerHTML = bodyText;
			
			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
			const viewModeButtons = detailCell.querySelectorAll('.view-mode-btn');
			const contentViews = detailCell.querySelectorAll('.content-view');
			
			viewModeButtons.forEach(button => {
				button.addEventListener('click', function(e) {
					e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
					
					const mode = this.getAttribute('data-mode');
					
					// –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
					viewModeButtons.forEach(btn => btn.classList.remove('active'));
					// –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞ —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É
					this.classList.add('active');
					
					// –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
					contentViews.forEach(view => view.classList.remove('active'));
					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å
					const targetView = detailCell.querySelector(`[data-view="${mode}"]`);
					if (targetView) {
						targetView.classList.add('active');
					}
				});
			});
			
			return detailRow;
		}

		// Function to create expandable content
		function createExpandableContent(text, maxLength = 100) {
			if (text.length <= maxLength) {
				return text;
			}

			const truncated = text.substring(0, maxLength) + "...";
			const fullText = text;

			const container = document.createElement('div');
			const textSpan = document.createElement('span');
			const button = document.createElement('button');

			textSpan.textContent = truncated;
			button.textContent = 'Show more';
			button.className = 'expand-btn';

			let isExpanded = false;
			button.addEventListener('click', function() {
				if (isExpanded) {
					textSpan.textContent = truncated;
					button.textContent = 'Show more';
					isExpanded = false;
				} else {
					textSpan.textContent = fullText;
					button.textContent = 'Show less';
					isExpanded = true;
				}
			});

			container.appendChild(textSpan);
			container.appendChild(document.createElement('br'));
			container.appendChild(button);

			return container;
		}

		// Function to process mail items
		function processMailItems(items) {
			loading.style.display = "none";

			if (items.length === 0) {
				emptyState.style.display = "block";
				return;
			}

			content.style.display = "block";

			items.forEach(item => {
				const row = document.createElement("tr");

				const idCell = document.createElement("td");
				idCell.className = "id-cell";
				idCell.innerHTML = '<span class="expand-indicator">‚ñ∂</span>' + (item.id ? item.id.substring(0, 8) + '...' : 'Unknown');

				const fromCell = document.createElement("td");
				fromCell.className = "from-cell";
				fromCell.textContent = item.from || 'Unknown';

				const toCell = document.createElement("td");
				toCell.className = "to-cell";
				toCell.textContent = Array.isArray(item.to) ? item.to.join(", ") : (item.to || 'Unknown');

				const subjectCell = document.createElement("td");
				subjectCell.className = "subject-cell truncate";
				subjectCell.textContent = item.subject || 'No subject';
				subjectCell.title = item.subject || 'No subject';

				const bodyCell = document.createElement("td");
				bodyCell.className = "body-cell";
				const bodyContent = item.body || 'No content';
				if (bodyContent.length > 100) {
					bodyCell.appendChild(createExpandableContent(bodyContent, 100));
				} else {
					bodyCell.textContent = bodyContent;
				}
				row.appendChild(idCell);
				row.appendChild(fromCell);
				row.appendChild(toCell);
				row.appendChild(subjectCell);
				row.appendChild(bodyCell);

				// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–æ–∫–∏
				row.addEventListener('click', function() {
					const detailRow = row.nextElementSibling;
					const indicator = row.querySelector('.expand-indicator');
					
					if (detailRow && detailRow.classList.contains('detail-row')) {
						// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
						detailRow.classList.toggle('expanded');
						indicator.classList.toggle('expanded');
					}
				});

				// –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
				const detailRow = createDetailRow(item);
				
				tableBody.appendChild(row);
				tableBody.appendChild(detailRow);
			});

			stats.textContent = 'Showing ' + items.length + ' mail item' + (items.length !== 1 ? 's' : '');
		}

		// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		loadData();
	});
</script>
</body>
</html>
